'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var useWalletLink = require('./useWalletLink-4fc7c26c.cjs.dev.js');
var useConnect = require('./useConnect-4158f2e2.cjs.dev.js');
var sdk = require('@thirdweb-dev/sdk');
var requiredParam = require('./required-param-581f26ec.cjs.dev.js');
require('react');
require('wagmi');
require('wagmi/connectors/coinbaseWallet');
require('wagmi/connectors/injected');
require('wagmi/connectors/walletConnect');
require('react/jsx-runtime');
require('@tanstack/react-query');
require('ethers');
require('tiny-invariant');
require('detect-browser');
require('buffer');



exports.ThirdwebProvider = useWalletLink.ThirdwebProvider;
exports.ThirdwebSDKProvider = useWalletLink.ThirdwebSDKProvider;
exports.WrappedThirdwebSDKProvider = useWalletLink.WrappedThirdwebSDKProvider;
exports.compilerMetadata = useWalletLink.compilerMetadata;
exports.contractType = useWalletLink.contractType;
exports.getErc1155 = useWalletLink.getErc1155;
exports.getErc20 = useWalletLink.getErc20;
exports.getErc721 = useWalletLink.getErc721;
exports.getErcs = useWalletLink.getErcs;
exports.useAcceptDirectListingOffer = useWalletLink.useAcceptDirectListingOffer;
exports.useAccount = useWalletLink.useAccount;
exports.useActiveClaimCondition = useWalletLink.useActiveClaimCondition;
exports.useActiveClaimConditionForWallet = useWalletLink.useActiveClaimConditionForWallet;
exports.useActiveListings = useWalletLink.useActiveListings;
exports.useAddress = useWalletLink.useAddress;
exports.useAirdropNFT = useWalletLink.useAirdropNFT;
exports.useAllRoleMembers = useWalletLink.useAllRoleMembers;
exports.useAuctionWinner = useWalletLink.useAuctionWinner;
exports.useAuth = useWalletLink.useAuth;
exports.useBalance = useWalletLink.useBalance;
exports.useBatchesToReveal = useWalletLink.useBatchesToReveal;
exports.useBidBuffer = useWalletLink.useBidBuffer;
exports.useBurnNFT = useWalletLink.useBurnNFT;
exports.useBurnToken = useWalletLink.useBurnToken;
exports.useBuyNow = useWalletLink.useBuyNow;
exports.useCancelListing = useWalletLink.useCancelListing;
exports.useChainId = useWalletLink.useChainId;
exports.useClaimConditions = useWalletLink.useClaimConditions;
exports.useClaimIneligibilityReasons = useWalletLink.useClaimIneligibilityReasons;
exports.useClaimNFT = useWalletLink.useClaimNFT;
exports.useClaimToken = useWalletLink.useClaimToken;
exports.useClaimedNFTSupply = useWalletLink.useClaimedNFTSupply;
exports.useClaimedNFTs = useWalletLink.useClaimedNFTs;
exports.useClaimerProofs = useWalletLink.useClaimerProofs;
exports.useCoinbaseWallet = useWalletLink.useCoinbaseWallet;
exports.useCompilerMetadata = useWalletLink.useCompilerMetadata;
exports.useConnectedWallet = useWalletLink.useConnectedWallet;
exports.useContract = useWalletLink.useContract;
exports.useContractEvents = useWalletLink.useContractEvents;
exports.useContractMetadata = useWalletLink.useContractMetadata;
exports.useContractMetadataUpdate = useWalletLink.useContractMetadataUpdate;
exports.useContractRead = useWalletLink.useContractRead;
exports.useContractType = useWalletLink.useContractType;
exports.useContractWrite = useWalletLink.useContractWrite;
exports.useCreateAuctionListing = useWalletLink.useCreateAuctionListing;
exports.useCreateDirectListing = useWalletLink.useCreateDirectListing;
exports.useDelayedRevealLazyMint = useWalletLink.useDelayedRevealLazyMint;
exports.useDesiredChainId = useWalletLink.useDesiredChainId;
exports.useDisconnect = useWalletLink.useDisconnect;
exports.useEdition = useWalletLink.useEdition;
exports.useEditionDrop = useWalletLink.useEditionDrop;
exports.useExecuteAuctionSale = useWalletLink.useExecuteAuctionSale;
exports.useGrantRole = useWalletLink.useGrantRole;
exports.useIsAddressRole = useWalletLink.useIsAddressRole;
exports.useLazyMint = useWalletLink.useLazyMint;
exports.useListing = useWalletLink.useListing;
exports.useListings = useWalletLink.useListings;
exports.useListingsCount = useWalletLink.useListingsCount;
exports.useLogin = useWalletLink.useLogin;
exports.useLogout = useWalletLink.useLogout;
exports.useMakeBid = useWalletLink.useMakeBid;
exports.useMakeOffer = useWalletLink.useMakeOffer;
exports.useMarketplace = useWalletLink.useMarketplace;
exports.useMetadata = useWalletLink.useMetadata;
exports.useMetamask = useWalletLink.useMetamask;
exports.useMinimumNextBid = useWalletLink.useMinimumNextBid;
exports.useMintNFT = useWalletLink.useMintNFT;
exports.useMintNFTSupply = useWalletLink.useMintNFTSupply;
exports.useMintToken = useWalletLink.useMintToken;
exports.useMultiwrap = useWalletLink.useMultiwrap;
exports.useNFT = useWalletLink.useNFT;
exports.useNFTBalance = useWalletLink.useNFTBalance;
exports.useNFTCollection = useWalletLink.useNFTCollection;
exports.useNFTDrop = useWalletLink.useNFTDrop;
exports.useNFTs = useWalletLink.useNFTs;
exports.useNetwork = useWalletLink.useNetwork;
exports.useNetworkMismatch = useWalletLink.useNetworkMismatch;
exports.useOffers = useWalletLink.useOffers;
exports.useOwnedNFTs = useWalletLink.useOwnedNFTs;
exports.usePack = useWalletLink.usePack;
exports.usePlatformFees = useWalletLink.usePlatformFees;
exports.usePrimarySaleRecipient = useWalletLink.usePrimarySaleRecipient;
exports.useReadonlySDK = useWalletLink.useReadonlySDK;
exports.useResetClaimConditions = useWalletLink.useResetClaimConditions;
exports.useRevealLazyMint = useWalletLink.useRevealLazyMint;
exports.useRevokeRole = useWalletLink.useRevokeRole;
exports.useRoleMembers = useWalletLink.useRoleMembers;
exports.useRoyaltySettings = useWalletLink.useRoyaltySettings;
exports.useSDK = useWalletLink.useSDK;
exports.useSDKChainId = useWalletLink.useSDKChainId;
exports.useSetAllRoleMembers = useWalletLink.useSetAllRoleMembers;
exports.useSetClaimConditions = useWalletLink.useSetClaimConditions;
exports.useSignatureDrop = useWalletLink.useSignatureDrop;
exports.useSigner = useWalletLink.useSigner;
exports.useSplit = useWalletLink.useSplit;
exports.useStorage = useWalletLink.useStorage;
exports.useStorageUpload = useWalletLink.useStorageUpload;
exports.useToken = useWalletLink.useToken;
exports.useTokenBalance = useWalletLink.useTokenBalance;
exports.useTokenDecimals = useWalletLink.useTokenDecimals;
exports.useTokenDrop = useWalletLink.useTokenDrop;
exports.useTokenSupply = useWalletLink.useTokenSupply;
exports.useTotalCirculatingSupply = useWalletLink.useTotalCirculatingSupply;
exports.useTotalCount = useWalletLink.useTotalCount;
exports.useTransferBatchToken = useWalletLink.useTransferBatchToken;
exports.useTransferNFT = useWalletLink.useTransferNFT;
exports.useTransferToken = useWalletLink.useTransferToken;
exports.useUnclaimedNFTSupply = useWalletLink.useUnclaimedNFTSupply;
exports.useUnclaimedNFTs = useWalletLink.useUnclaimedNFTs;
exports.useUpdateMetadata = useWalletLink.useUpdateMetadata;
exports.useUpdatePlatformFees = useWalletLink.useUpdatePlatformFees;
exports.useUpdatePrimarySaleRecipient = useWalletLink.useUpdatePrimarySaleRecipient;
exports.useUpdateRoyaltySettings = useWalletLink.useUpdateRoyaltySettings;
exports.useUser = useWalletLink.useUser;
exports.useVote = useWalletLink.useVote;
exports.useWalletConnect = useWalletLink.useWalletConnect;
exports.useWalletLink = useWalletLink.useWalletLink;
exports.useWinningBid = useWalletLink.useWinningBid;
exports.useConnect = useConnect.useConnect;
Object.defineProperty(exports, 'ChainId', {
	enumerable: true,
	get: function () { return sdk.ChainId; }
});
exports.shouldNeverPersistQuery = requiredParam.shouldNeverPersistQuery;
